const path = require('path');
const helpers = require('./helpers');

/**
 * Generates the user data path based on the platform and roaming settings.
 * Provides default paths if environment variables are undefined.
 *
 * @param {boolean} roaming - Whether to use roaming data paths (Windows only).
 * @param {string} platform - The operating system platform.
 * @returns {string} - The formatted user data path.
 */
function userData(roaming, platform) {
    let dataPath;
    platform = platform || process.platform;

    if (platform === "darwin") {
        // macOS
        const homeDir = process.env.HOME || '/Users/breti'; // Replace '/Users/breti' with your default macOS user home if necessary
        dataPath = path.join(homeDir, 'Library', 'Application Support', '{0}');
    } else if (platform === "win32") {
        // Windows
        let sysVariable = roaming ? "APPDATA" : "LOCALAPPDATA";
        const appDataPath = process.env[sysVariable] || process.env.APPDATA || 'C:\\Users\\breti\\AppData\\Roaming'; // Replace 'C:\\Users\\breti' with your actual Windows user path if necessary
        dataPath = path.join(appDataPath, '{1}', '{0}');
    } else {
        // Linux and other Unix-like systems
        if (process.env.XDG_DATA_HOME) {
            dataPath = path.join(process.env.XDG_DATA_HOME, '{0}');
        } else {
            const homeDir = process.env.HOME || '/home/user'; // Replace '/home/user' with your default Linux user home if necessary
            dataPath = path.join(homeDir, ".local", "share", "{0}");
        }
    }

    return dataPath;
}

/**
 * Generates the user config path based on the platform and roaming settings.
 * Provides default paths if environment variables are undefined.
 *
 * @param {boolean} roaming - Whether to use roaming config paths (Windows only).
 * @param {string} platform - The operating system platform.
 * @returns {string} - The formatted user config path.
 */
function userConfig(roaming, platform) {
    let dataPath;
    platform = platform || process.platform;

    if (platform === "darwin" || platform === "win32") {
        dataPath = userData(roaming, platform);
    } else {
        if (process.env.XDG_CONFIG_HOME) {
            dataPath = path.join(process.env.XDG_CONFIG_HOME, "{0}");
        } else {
            const homeDir = process.env.HOME || '/home/user'; // Replace '/home/user' with your default Linux user home if necessary
            dataPath = path.join(homeDir, ".config", "{0}");
        }
    }

    return dataPath;
}

/**
 * Generates the user cache path based on the platform.
 * Provides default paths if environment variables are undefined.
 *
 * @param {string} platform - The operating system platform.
 * @returns {string} - The formatted user cache path.
 */
function userCache(platform) {
    let dataPath;
    platform = platform || process.platform;

    if (platform === "win32") {
        const appDataPath = process.env.LOCALAPPDATA || process.env.APPDATA || 'C:\\Users\\breti\\AppData\\Roaming'; // Replace as necessary
        dataPath = path.join(appDataPath, '{1}', '{0}', 'Cache');
    } else if (platform === "darwin") {
        const homeDir = process.env.HOME || '/Users/breti'; // Replace as necessary
        dataPath = path.join(homeDir, 'Library', 'Caches', '{0}');
    } else {
        if (process.env.XDG_CACHE_HOME) {
            dataPath = path.join(process.env.XDG_CACHE_HOME, '{0}');
        } else {
            const homeDir = process.env.HOME || '/home/user'; // Replace as necessary
            dataPath = path.join(homeDir, '.cache', '{0}');
        }
    }

    return dataPath;
}

/**
 * Generates the user logs path based on the platform.
 * Provides default paths if environment variables are undefined.
 *
 * @param {string} platform - The operating system platform.
 * @returns {string} - The formatted user logs path.
 */
function userLogs(platform) {
    let dataPath;
    platform = platform || process.platform;

    if (platform === "win32") {
        dataPath = path.join(userData(false, platform), 'Logs');
    } else if (platform === "darwin") {
        const homeDir = process.env.HOME || '/Users/breti'; // Replace as necessary
        dataPath = path.join(homeDir, 'Library', 'Logs', '{0}');
    } else {
        dataPath = path.join(userCache(platform), 'log');
    }

    return dataPath;
}

/**
 * AppDirectory class handles the generation of various directory paths
 * for user data, config, cache, and logs based on the application name,
 * author, version, and platform.
 */
function AppDirectory(options) {
    if (helpers.instanceOf(options, String)) {
        options = { appName: options };
    }

    // Validate that appName is provided
    if (!options.appName) {
        throw new Error('AppDirectory requires an appName.');
    }

    // substitution order:
    // {0} - appName
    // {1} - appAuthor

    this.appName = options.appName;
    this.appAuthor = options.appAuthor || options.appName;
    this.appVersion = options.appVersion || null;
    this._useRoaming = options.useRoaming || false;
    this._platform = options.platform || null;

    this._setTemplates();
}

AppDirectory.prototype = {
    /**
     * Sets up the path templates based on the current configuration.
     */
    _setTemplates: function () {
        this._userDataTemplate = userData(this._useRoaming, this._platform);
        /*this._siteDataTemplate = siteData(this._platform);*/
        this._userConfigTemplate = userConfig(this._useRoaming, this._platform);
        /*this._siteConfigTempalte = siteConfig(this._platform);*/
        this._userCacheTemplate = userCache(this._platform);
        this._userLogsTemplate = userLogs(this._platform);
    },

    // Getter and Setter for useRoaming
    get useRoaming() {
        return this._useRoaming;
    },
    set useRoaming(bool) {
        this._useRoaming = bool;
        this._setTemplates();
    },

    // Getter and Setter for platform
    get platform() {
        return this._platform;
    },
    set platform(str) {
        this._platform = str;
        this._setTemplates();
    },

    /**
     * Generates the user data path with optional versioning.
     * @returns {string} - The formatted user data path.
     */
    userData: function () {
        let dataPath = this._userDataTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    },

    /* Uncomment if siteData is needed
    siteData: function () {
        let dataPath = this._siteDataTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    },
    */

    /**
     * Generates the user config path with optional versioning.
     * @returns {string} - The formatted user config path.
     */
    userConfig: function () {
        let dataPath = this._userConfigTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    },

    /* Uncomment if siteConfig is needed
    siteConfig: function () {
        let dataPath = this._siteConfigTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    },
    */

    /**
     * Generates the user cache path with optional versioning.
     * @returns {string} - The formatted user cache path.
     */
    userCache: function () {
        let dataPath = this._userCacheTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    },

    /**
     * Generates the user logs path with optional versioning.
     * @returns {string} - The formatted user logs path.
     */
    userLogs: function () {
        let dataPath = this._userLogsTemplate;
        if (this.appVersion !== null) {
            dataPath = path.join(dataPath, this.appVersion);
        }
        return helpers.formatStr(dataPath, this.appName, this.appAuthor);
    }
};

module.exports = AppDirectory;

/**
 * Helper functions for AppDirectory.
 */

/**
 * Determines if an object is an instance of a constructor.
 * Converts literals to their object counterparts for accurate checking.
 *
 * @param {Object} object - The object to check.
 * @param {Function} constructor - The constructor to compare against.
 * @returns {boolean} - True if object is an instance of constructor, else false.
 */
function instanceOf(object, constructor) {
    // If object is a string/array/number literal,
    // turn it into a 'real' object
    if (typeof object !== "object") {
        object = new object.constructor(object);
    }

    // Iterate up the object's prototype chain
    while (object !== null) {
        if (object === constructor.prototype) {
            // We've found the correct prototype!
            return true;
        }

        // Next prototype up
        object = Object.getPrototypeOf(object);
    }

    // Nothing found.
    return false;
}

/**
 * Formats a string by replacing placeholders with provided arguments.
 * Example: formatStr("Hello {0}", "World") => "Hello World"
 *
 * @param {string} format - The string containing placeholders.
 * @param  {...any} args - The values to replace the placeholders.
 * @returns {string} - The formatted string.
 */
function formatStr(format, ...args) {
    // This function has been adapted from 
    // http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format
    return format.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] !== 'undefined'
            ? args[number]
            : match;
    });
}

module.exports.instanceOf = instanceOf;
module.exports.formatStr = formatStr;
